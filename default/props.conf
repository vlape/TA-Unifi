### Default config for dev purposes. TZ may be needed since UDM will default TZ to location
[default]
TZ = US/Central
MAX_DAYS_AGO = 100
MAX_DAYS_HENCE = 90
### END ###

[unifi]
TRANSFORMS-set_sourcetype = sourcetype-blebr2d,sourcetype-blebrd,sourcetype-bleconnd,sourcetype-btcli,sourcetype-crond,sourcetype-dnsmasq,sourcetype-dnsmasq-dhcp,sourcetype-dropbear,sourcetype-hostapd,sourcetype-kernel,sourcetype-lldpcli,sourcetype-lldp,sourcetype-lldpd,sourcetype-logread,sourcetype-mca,sourcetype-mcad,sourcetype-mca-monitor,sourcetype-mca-ctrl,sourcetype-ntpd,sourcetype-procd,sourcetype-stahtd,sourcetype-stamgr,sourcetype-sudo,sourcetype-switch,sourcetype-switch_app,sourcetype-syslog,sourcetype-syswrapper,sourcetype-ubntconf,sourcetype-uiwwand,sourcetype-uplink-monitor,sourcetype-unifi-network-service-helper,sourcetype-unifi,sourcetype-ubios-udapi-server,sourcetype-wpa_supplicant,sourcetype-wevent,sourcetype-sysmon,sourcetype-ubntbox,sourcetype-mca-custom-alert,sourcetype-coredump,sourcetype-fwupdate-real,sourcetype-mca-cli-op,sourcetype-cfgmtd,sourcetype-hwcheck,sourcetype-oopsdump,sourcetype-mesh-monitor,sourcetype-utermd,sourcetype-btservice,sourcetype-udhcpc,sourcetype-syswrapper,sourcetype-blebr-cfg-savior,sourcetype-blebr-cfg-maker,sourcetype-bleconn-cfg-maker,sourcetype-vlan,sourcetype-init,sourcetype-kernel,sourcetype-process,sourcetype-main,sourcetype-blebr-support-info-gen,sourcetype-ubnt-rf-env,sourcetype-dpi-flow-stats,sourcetype-systemd,sourcetype-getsig,sourcetype-linkcheck,sourcetype-wifiman-server-cert,sourcetype-fprint-sig-update,sourcetype-bash,sourcetype-firewall,sourcetype-ulogd,sourcetype-node,sourcetype-su,sourcetype-pre-start,sourcetype-postgresql,sourcetype-utmdaemon,sourcetype-ubnt_monitor,sourcetype-sshd,sourcetype-ubnt-dpkg-cache,sourcetype-ulcmd,sourcetype-dbus,sourcetype-java,sourcetype-bootup-invoker,sourcetype-usd,sourcetype-freeswitch,sourcetype-udapi-bridge,sourcetype-ubios-udhcpc-decline-script,sourcetype-ultedisplayd,sourcetype-ucore-setup-listener,sourcetype-unifi-protect-db-cluster-cleanup,sourcetype-hci-device-up
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false
MAX_TIMESTAMP_LOOKAHEAD = 15
TIME_PREFIX = ^
TRUNCATE = 1000

[unifi:blebr2d]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:blebrd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:bleconnd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:btcli]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false


[unifi:crond]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:dnsmasq]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false
EXTRACT-record_type = \s\S+\[(?P<record_type>\w+)\]\s
EXTRACT-fail_startup = dnsmasq\[\d+\]\: (?P<message>FAILED to start up)
EXTRACT-unable_to_read = dnsmasq\[\d+\]\: (?P<message>cannot read (?P<file_path>\S+(?P<file_name>dns.*)): (?P<result>.*))
EXTRACT-clear_cache = dnsmasq\[\d+\]\: (?P<message>cleared cache)
EXTRACT-sigterm = dnsmasq\[\d+\]\: (?P<message>exiting on receipt of SIGTERM)
EXTRACT-compile_options = dnsmasq\[\d+\]\: (?P<message>compile time options:(?P<compile_options>.*))

#TODO Research directionality od these logs
EXTRACT-stopped_listening_on1 = dnsmasq\[\d+\]\: (?P<message>stopped listening on (?P<interface>\S+): (?P<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) port (?P<port>\d+))
EXTRACT-stopped_listening_on2 = dnsmasq\[\d+\]\: (?P<message>stopped listening on (?P<interface>\S+): (?P<ipv6>\w{1,4}:\w{0,4}:\w{0,4}:\w{0,4}:\w{0,4})\S+ port (?P<port>\d+))

EXTRACT-listening_on1 = dnsmasq\[\d+\]\: (?P<message>listening on (?P<interface>\S+): (?P<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) port (?P<port>\d+))
EXTRACT-listening_on2 = dnsmasq\[\d+\]\: (?P<message>listening on (?P<interface>\S+): (?P<ipv6>\w{1,4}:\w{0,4}:\w{0,4}:\w{0,4}:\w{0,4})\S+ port (?P<port>\d+))
EXTRACT-read0 = dnsmasq\[\d+\]\: (?P<message>(?P<action>read) (?P<filePath>\S+\/(?P<file>\w+))\s\-\s.*)
EXTRACT-reading = dnsmasq\[\d+\]\: (?P<message>(?P<action>reading) (?P<filePath>\S+))
EXTRACT-reduce_dns_packet = dnsmasq\[\d+\]\: (?P<message>reducing.*?nameserver (?P<nameserver_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) to (?P<packse_size>\d+))
EXTRACT-started_cachesize = dnsmasq\[\d+\]\: (?P<message>started\, version (?P<version>\S+) cachesize (?P<cache_size>\d+))
EXTRACT-started_dns = dnsmasq\[\d+\]\: (?P<message>started\, version (?P<version>\S+) DNS (?P<state>\w+))
EXTRACT-using_nameserver0 = dnsmasq\[\d+\]\: (?P<message>using (?P<server_count>\d+) .*)
EXTRACT-using_nameserver1 = dnsmasq\[\d+\]\: (?P<message>using nameserver (?P<dst_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\#(?P<dst_port>\d+))
EXTRACT-interface_not_exist = dnsmasq\[\d+\]\: (?P<message>warning: interface (?P<src_interface>\S+) does not currently exist)
EXTRACT-no_servers_found = dnsmasq\[\d+\]\: (?P<message>no servers found in (?P<file_path>\S+\/(?P<file>\S+)), .*)

EVAL-action = case(message=="FAILED to start up","failure")
EVAL-compile_options = split(compile_options," ")

# EVAL-src=coalesce(src,src_ip)
# EVAL-response_action = case(evtACT=="reply" or evtACT=="cached", "answered", evtACT LIKE "%list" OR answer=="0.0.0.0", "blocked")
# EVAL-local_hosts = if(evtACT LIKE "%hosts","true","false")
# EVAL-blocked_query = case(((evtACT=="config" AND answer=="0.0.0.0") OR evtACT LIKE "%list" OR response_acion=="blocked"),"true")
# EVAL-cached_response = case((evtACT=="cached" OR evtACT LIKE "%hosts" OR evtACT=="config"),"true", (evtACT=="reply"),"false")
# EVAL-dns_host_ip = case(isnull(dns_host_ip), if(evtACT=="query" OR evtACT=="forwarded",dest_ip,host))
# EVAL-dest_port = case(isnull(dest_port),"53")
# EVAL-transport = case(isnull(dest_port),"tcp")
# EVAL-reply_code = if( isnull(reply_code1) AND message_type=="Response", case(answer=="NXDOMAIN", "NXDomain", answer like "%NODATA%", "NoData", evtACT like "%refused%", "Refused", cached_response=="true" OR evtACT="reply", "NoError"), reply_code)
# EVAL-message_type = case((evtACT=="query" OR evtAC=="forwarded"),"Query",(evtACT=="cached" OR evtACT=="reply" OR evtACT=="config" OR evtACT LIKE "%hosts" OR evtACT LIKE "%list"),"Response")
#
# EVAL-name = coalesce(query,dest)
# EVAL-vendor_product = "dnsmasq"
# ##Need to complete this
# #EVAL-dest_ip=case()
# #EVAL-src_ip=case()
#
# FIELDALIAS-client = src AS client
#
# EXTRACT-status,version = dnsmasq\[\d+\]\: (?<status>\S+)\, version (?P<version>\S+)
# EXTRACT-dns_host,evtACT = \]: nameserver (?P<dns_host>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (?P<evtACT>.+)
# EXTRACT-transaction_id,src_ip,src_port = \]: (?P<transaction_id>\d+) (?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(?P<src_port>\d+)
#
# ##query-local resolution request
# EXTRACT-evtACT,query_type,query,src_ip = \s+(?P<evtACT>query)[\s|\[](?P<query_type>\w+)]\s(?P<query>\S+)\s\S+\s(?P<src_ip>\S+)
#
# ##query-external relay resolution
# EXTRACT-evtACT,name,dest_ip =\s+(?P<evtACT>forwarded)\s+(?P<name>.+)\sto\s(?P<dest_ip>\S+)
#
# ##response-locl resolution
# EXTRACT-evtACT,dest,answer = \s+(?P<evtACT>\/\S+|config|cached)\s+(?P<dest>.+)\sis\s(?P<answer>\S+)
# EXTRACT-reply_code = \s+(?=\/\S+|config|cached).+?is\s(?P<reply_code>[A-Z]+)
#
# ##response-external resolution
# EXTRACT-evtACT1,dest1,answer1 = \s+(?P<evtACT>reply)\s+(?P<dest>.+)\sis\s(?P<answer>.+)
#
# #Query warning/error
# EXTRACT-message,dest=\s\S+\[\d+\]\: (?P<message>.+?)\: (?P<dest>[\S+\.]+)



[unifi:dnsmasq-dhcp]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

EVAL-action = case((flag=="DHCPNAK" OR assignName =="not giving name" OR flag=="not giving name"), "blocked", flag == "DHCPACK", "added")
EVAL-vendor_product = " UniFi dnsmasq"
EVAL-lease_duration = if(lease_scope_days == "1d", "86400", lease_duration)
EVAL-src_dns = if(isnull(src_dns),src_nt_host,src_dns)

EXTRACT-DHCPDISCOVER0 = [^\]\n]*\]:\s+(?P<flag>DHCPDISCOVER)\((?P<interface>\S+)\)\s(?P<src_mac>[0-9a-fA-F:]+)\s
EXTRACT-DHCPDISCOVER1 = [^\]\n]*\]:\s+(?P<flag>DHCPINFORM|DHCPOFFER|DHCPREQUEST|DHCPDISCOVER)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)
EXTRACT-DHCPACK0 = [^\]\n]*\]:\s+(?P<flag>DHCPACK)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s(?<src_nt_host>\S+)
EXTRACT-DHCPACK1 = [^\]\n]*\]:\s+(?P<flag>DHCPACK)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)
EXTRACT-DHCPNAK0 = [^\]\n]*\]:\s+(?P<flag>DHCPNAK)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s(?P<message>.+)
EXTRACT-DHCPNAK1 = [^\]\n]*\]:\s+(?P<flag>not giving name) (?P<src_nt_host>\S+)[\w+\s]+\s(?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (?P<vendor_reason>.+)
EXTRACT-DHCPRELEASE0 = [^\]\n]*\]:\s+(?P<flag>DHCPRELEASE)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)
EXTRACT-DHCPRELEASE1 = [^\]\n]*\]:\s+(?P<flag>DHCPRELEASE)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s(?P<vendor_reason>.+)
EXTRACT-LEASE_INFO = [^,\n]*,\s+\w+\s+\w+\s+(?P<lease_scope>[^,]+), lease time (?P<lease_scope_days>\S+)
FIELDALIAS-dnsmasq-dhcp-hostname = src_nt_host AS hostname
FIELDALIAS-dnsdhcp-signature = flag AS signature



[unifi:dropbear]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

EVAL-dst_mac = upper((substr(dst_mac, 0,2).":".substr(dst_mac,3,2).":".substr(dst_mac,5,2).":".substr(dst_mac,7,2).":".substr(dst_mac,9,2).":".substr(dst_mac,11,2)))
EVAL-src_mac = upper((substr(src_mac, 0,2).":".substr(src_mac,3,2).":".substr(src_mac,5,2).":".substr(src_mac,7,2).":".substr(src_mac,9,2).":".substr(src_mac,11,2)))
#EVAL-acton = if(vendor_action=="succeeded", "success", "failure")

EXTRACT-exit0 = \w{3}\s+\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}\s(?P<dst_host>\S+)\s(?P<dst_mac>\S{12})\,(?P<unifi_model>\S+)\-(?P<unifi_version>\d\S+):\sdropbear\[\d+\]\:\sExit\s\((?P<user>\S+)\)\sfrom\s\<(?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(?P<src_port>\d{1,5})\>:\s(?P<e_action>Disconnect received)
EXTRACT-exit1 = \w{3}\s+\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}\s(?P<dst_host>\S+)\s(?P<dst_mac>\S{12})\,(?P<unifi_model>\S+)\-(?P<unifi_version>\d\S+):\sdropbear\[\d+\]\:\sExit\s\((?P<user>\S+)\):\s(?P<e_action>Disconnect received)
EXTRACT-early_exit = \w{3}\s+\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}\s(?P<src_host>\S+)\s(?P<src_mac>\S{12})\,(?P<unifi_model>\S+)\-(?P<unifi_version>\d\S+):\sdropbear\[\d+\]\:\sEarly\sexit\:\s(?P<result>.*)
EXTRACT-success_auth = \w{3}\s+\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}\s(?P<dst_host>\S+)\s(?P<dst_mac>\S{12})\,(?P<unifi_model>\S+)\-(?P<unifi_version>\d\S+):\sdropbear\[\d+\]\:\sPassword auth (?P<vendor_action>\w+) for \'(?P<user>\S+)\' from (?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(?P<src_port>\d{1,5})
EXTRACT-child_connection = \w{3}\s+\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}\s(?P<dst_host>\S+)\s(?P<dst_mac>\S{12})\,(?P<unifi_model>\S+)\-(?P<unifi_version>\d\S+):\sdropbear\[\d+\]\:\sChild connection from (?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(?P<src_port>\d{1,5})
EXTRACT-set_system = \w{3}\s+\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}\s(?P<dst_host>\S+)\s(?P<dst_mac>\S{12})\,(?P<unifi_model>\S+)\-(?P<unifi_version>\d\S+):\sdropbear\[\d+\]\:\s(?P<event>set system.(?P<process>ssh))\s(?P<result>\w+)

# FIELDALIAS-src = src_ip AS src
# FIELDALIAS-dest_ip = host AS dest_ip
# FIELDALIAS-dest = host AS dest
# EXTRACT-signature,src_ip,src_port = \]:\s(?P<signature>[\w\s]+)\s.+\s(?P<src_ip>\d+.\d+.\d+.\d+):(?P<src_port>\d+)
# EXTRACT-dropbear_action,user,signature = \]:\s(?P<dropbear_action>Exit)\s\((?P<user>\w+)\):\s(?P<signature>.+)
# #EXTRACT-dest_ip = ^(?:[^ \n]* ){3}(?P<dest_ip>[^ ]+)
# EXTRACT-dropbear_action,signature = \]:\s(?P<dropbear_action>[\w\s]+):\s+(?P<signature>.+)
# EXTRACT-user0 = for\s(?P<user>.+?)\sfrom
# EXTRACT-user1 = dropbear\[\w+\]\:.+user \'(?<user>.+)\'
# ##This looks sloppy, redo the reply_code and action evals
# EVAL-reply_code = if(signature="Password auth succeeded for", "Password auth succeeded", if(signature="Bad password attempt for", "Bad password attempt", signature))
# EVAL-action = case(signature == "Password auth succeeded for", "success", signature == "Bad Password attempt for" OR signature LIKE "Max auth tries%" OR signature == "Login attempt for nonexistent user", "failure")
# EVAL-app = dropbear


[unifi:hostapd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false


[unifi:kernel]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false


[unifi:lldpcli]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:lldp]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:lldpd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:logread]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:mca]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:mcad]
ANNOTATE_PUNCT = false
KV_MODE = auto
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:mca-monitor]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:mca-ctrl]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:ntpd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:procd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:stahtd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:stamgr]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:sudo]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:switch]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:switch_app]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:syslog]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:syswrapper]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:ubntconf]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:uiwwand]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:uplink-monitor]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:unifi-network-service-helper]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:unifi]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:ubios-udapi-server]
# ANNOTATE_PUNCT = false
# KV_MODE = none
# LINE_BREAKER = ([\r\n]+)\w{3}
#
# SHOULD_LINEMERGE = false
#
#

[unifi:wpa_supplicant]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:wevent]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi|sysmon]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:ubntbox]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:mca-custom-alert]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:coredump]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:fwupdate-real]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:mca-cli-op]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:cfgmtd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:hwcheck]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:oopsdump]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:mesh-monitor]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:utermd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:btservice]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:udhcpc]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:syswrapper]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:blebr-cfg-savior]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:blebr-cfg-maker]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:bleconn-cfg-maker]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:vlan]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:init]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:kernel]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:process]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:main]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:blebr-support-info-gen]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:sourcetype-ubnt-rf-env]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:dpi-flow-stats]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:systemd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:getsig]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:linkcheck]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:wifiman-server-cert]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:fprint-sig-update]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:bash]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:firewall]
FIELDALIAS-unififw_ack = ACK AS ack
FIELDALIAS-unififw_descr = DESCR AS rule
FIELDALIAS-unififw_dpt = DPT AS dest_port
FIELDALIAS-unififw_dst = DST AS dest
#FIELDALIAS-unififw_flags = FLAGS as flags
FIELDALIAS-unififw_gid  = GID AS gid
FIELDALIAS-unififw_id = ID AS session_id
FIELDALIAS-unififw_in = IN AS src_interface
FIELDALIAS-unififw_len = LEN as bytes
#FIELDALIAS-unififw_mac =
FIELDALIAS-unififw_mark = MARK as mark
FIELDALIAS-unififw_out = OUT AS dest_interface
FIELDALIAS-unififw_prec = PREC as prec
FIELDALIAS-unififw_proto = PROTO AS transport
FIELDALIAS-unififw_seq =  SEQ AS seq
FIELDALIAS-unififw_spt = SPT AS src_port
FIELDALIAS-unififw_src = SRC AS src
FIELDALIAS-unififw_tos = TOS as tos
FIELDALIAS-unififw_ttl = TTL AS ttl
FIELDALIAS-unififw_uid = UID AS uid
FIELDALIAS-unififw_ugrp = UGRP AS ugrp
FIELDALIAS-unififw_window = WINDOW AS window
#EVAL-direction = if(isnull(IN),"outbound","inbound")
EVAL-vendor_product = "UniFi Firewall"
REPORT-netfilter_mac = netfilter_mac
REPORT-netfilter_flags = netfilter_flags
REPORT-netfilter_tcp_flag = netfilter_tcp_flag
LOOKUP-netfilter_action = netfilter_action event_action AS ACTION OUTPUT cim_action AS action
LOOKUP-netfilter_transport = netfilter_transport PROTO OUTPUT transport

[unifi:ulogd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:node]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:-su]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:pre-start]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:postgresql]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:utmdaemon]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:ubnt_monitor]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:sshd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:ubnt-dpkg-cache]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:ulcmd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:dbus]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:java]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:bootup-invoker]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:usd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:freeswitch]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:udapi-bridge]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:sourcetype-ubios-udhcpc-decline-script]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:ultedisplayd]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:ucore-setup-listener]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:unifi-protect-db-cluster-cleanup]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false

[unifi:hci-device-up]
ANNOTATE_PUNCT = false
KV_MODE = none
LINE_BREAKER = ([\r\n]+)\w{3}
SHOULD_LINEMERGE = false
